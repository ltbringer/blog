{"version":3,"sources":["webpack:///./src/components/SEO.js","webpack:///./src/pages/index.js","webpack:///./node_modules/url-join/lib/url-join.js","webpack:///./src/components/PostListing.js"],"names":["SEO","title","description","image","postURL","postNode","postPath","postSEO","postMeta","frontmatter","excerpt","cover","console","log","urljoin","config","siteUrl","pathPrefix","siteTitle","siteDescription","siteLogo","blogURL","schemaOrgJSONLD","url","name","alternateName","siteTitleAlt","push","itemListElement","position","item","headline","content","type","JSON","stringify","property","siteFBAppID","userTwitter","Index","data","postEdges","allMarkdownRemark","edges","pageQuery","definition","normalize","strArray","resultArray","length","TypeError","match","first","shift","replace","i","component","str","join","parts","split","arguments","slice","call","module","exports","PostListing","postList","forEach","postEdge","path","node","fields","slug","tags","categories","date","timeToRead","getPostList","className","styles","articleList","map","post","to","key","articleBox","right","meta"],"mappings":"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","file":"component---src-pages-index-js-aa7c5a5bfa1f72a67be9.js","sourcesContent":["import React from 'react'\nimport Helmet from 'react-helmet'\nimport urljoin from 'url-join'\nimport config from '../../data/SiteConfig'\n\nconst SEO = ({ postNode, postPath, postSEO }) => {\n  let title\n  let description\n  let image\n  let postURL\n  if (postSEO) {\n    const postMeta = postNode.frontmatter\n    ;({ title } = postMeta)\n    description = postMeta.description ? postMeta.description : postNode.excerpt\n    image = postMeta.cover\n    console.log(image)\n    postURL = urljoin(config.siteUrl, config.pathPrefix, postPath)\n  } else {\n    title = config.siteTitle\n    description = config.siteDescription\n    image = config.siteLogo\n  }\n\n  console.log(config.siteUrl, config.pathPrefix, image)\n  image = urljoin(config.siteUrl, config.pathPrefix, image)\n  const blogURL = urljoin(config.siteUrl, config.pathPrefix)\n  const schemaOrgJSONLD = [\n    {\n      '@context': 'http://schema.org',\n      '@type': 'WebSite',\n      url: blogURL,\n      name: title,\n      alternateName: config.siteTitleAlt ? config.siteTitleAlt : ''\n    }\n  ]\n  if (postSEO) {\n    schemaOrgJSONLD.push(\n      {\n        '@context': 'http://schema.org',\n        '@type': 'BreadcrumbList',\n        itemListElement: [\n          {\n            '@type': 'ListItem',\n            position: 1,\n            item: {\n              '@id': postURL,\n              name: title,\n              image\n            }\n          }\n        ]\n      },\n      {\n        '@context': 'http://schema.org',\n        '@type': 'BlogPosting',\n        url: blogURL,\n        name: title,\n        alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\n        headline: title,\n        image: {\n          '@type': 'ImageObject',\n          url: image\n        },\n        description\n      }\n    )\n  }\n  return (\n    <Helmet>\n      {/* General tags */}\n      <meta name=\"description\" content={description} />\n      <meta name=\"image\" content={image} />\n\n      {/* Schema.org tags */}\n      <script type=\"application/ld+json\">\n        {JSON.stringify(schemaOrgJSONLD)}\n      </script>\n\n      {/* OpenGraph tags */}\n      <meta property=\"og:url\" content={postSEO ? postURL : blogURL} />\n      {postSEO ? <meta property=\"og:type\" content=\"article\" /> : null}\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={description} />\n      <meta property=\"og:image\" content={image} />\n      <meta\n        property=\"fb:app_id\"\n        content={config.siteFBAppID ? config.siteFBAppID : ''}\n      />\n\n      {/* Twitter Card tags */}\n      <meta name=\"twitter:card\" content=\"summary_large_image\" />\n      <meta\n        name=\"twitter:creator\"\n        content={config.userTwitter ? config.userTwitter : ''}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={description} />\n      <meta name=\"twitter:image\" content={image} />\n    </Helmet>\n  )\n}\n\nexport default SEO\n","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql } from 'gatsby'\nimport Layout from '../layout'\nimport PostListing from '../components/PostListing'\nimport SEO from '../components/SEO'\nimport config from '../../data/SiteConfig'\n\nconst Index = ({ data }) => (\n  <Layout>\n    <main>\n      <Helmet title={config.siteTitle} />\n      <SEO />\n      <PostListing postEdges={data.allMarkdownRemark.edges} />\n    </main>\n  </Layout>\n)\n\nexport default Index\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query IndexQuery {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [fields___date], order: DESC }\n    ) {\n      edges {\n        node {\n          fields {\n            slug\n            date(formatString: \"MMMM DD, YYYY\")\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n            categories\n          }\n        }\n      }\n    }\n  }\n`\n","require(\"core-js/modules/es6.regexp.split\");\n\nrequire(\"core-js/modules/es6.regexp.replace\");\n\nrequire(\"core-js/modules/es6.regexp.match\");\n\n(function (name, context, definition) {\n  if (typeof module !== 'undefined' && module.exports) module.exports = definition();else if (typeof define === 'function' && define.amd) define(definition);else context[name] = definition();\n})('urljoin', this, function () {\n  function normalize(strArray) {\n    var resultArray = [];\n\n    if (strArray.length === 0) {\n      return '';\n    }\n\n    if (typeof strArray[0] !== 'string') {\n      throw new TypeError('Url must be a string. Received ' + strArray[0]);\n    } // If the first part is a plain protocol, we combine it with the next part.\n\n\n    if (strArray[0].match(/^[^/:]+:\\/*$/) && strArray.length > 1) {\n      var first = strArray.shift();\n      strArray[0] = first + strArray[0];\n    } // There must be two or three slashes in the file protocol, two slashes in anything else.\n\n\n    if (strArray[0].match(/^file:\\/\\/\\//)) {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1:///');\n    } else {\n      strArray[0] = strArray[0].replace(/^([^/:]+):\\/*/, '$1://');\n    }\n\n    for (var i = 0; i < strArray.length; i++) {\n      var component = strArray[i];\n\n      if (typeof component !== 'string') {\n        throw new TypeError('Url must be a string. Received ' + component);\n      }\n\n      if (component === '') {\n        continue;\n      }\n\n      if (i > 0) {\n        // Removing the starting slashes for each component but the first.\n        component = component.replace(/^[\\/]+/, '');\n      }\n\n      if (i < strArray.length - 1) {\n        // Removing the ending slashes for each component but the last.\n        component = component.replace(/[\\/]+$/, '');\n      } else {\n        // For the last component we will combine multiple slashes to a single one.\n        component = component.replace(/[\\/]+$/, '/');\n      }\n\n      resultArray.push(component);\n    }\n\n    var str = resultArray.join('/'); // Each input component is now separated by a single slash except the possible first plain protocol part.\n    // remove trailing slash before parameters or hash\n\n    str = str.replace(/\\/(\\?|&|#[^!])/g, '$1'); // replace ? in parameters with &\n\n    var parts = str.split('?');\n    str = parts.shift() + (parts.length > 0 ? '?' : '') + parts.join('&');\n    return str;\n  }\n\n  return function () {\n    var input;\n\n    if (typeof arguments[0] === 'object') {\n      input = arguments[0];\n    } else {\n      input = [].slice.call(arguments);\n    }\n\n    return normalize(input);\n  };\n});","import React from 'react'\nimport { Link } from 'gatsby'\nimport styles from './PostsListing.module.scss'\n\nconst PostListing = ({ postEdges }) => {\n  const getPostList = () => {\n    const postList = []\n    postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        categories: postEdge.node.frontmatter.categories,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      })\n    })\n    return postList\n  }\n\n  const postList = getPostList()\n  return (\n    <div className={styles.articleList}>\n      {/* Your post list here. */\n      postList.map(post => (\n        <Link to={post.path} key={post.title}>\n          <article className={styles.articleBox}>\n            <div className={styles.right}>\n              <h3>{post.title}</h3>\n              <div className={styles.meta}>\n                {post.date} &mdash; <span>{post.categories.join(' / ')}</span>{' '}\n                &mdash; {post.timeToRead} Min Read{' '}\n              </div>\n              <p>{post.excerpt}</p>\n            </div>\n          </article>\n        </Link>\n      ))}\n    </div>\n  )\n}\n\nexport default PostListing\n"],"sourceRoot":""}