{"version":3,"sources":["webpack:///./src/components/PostsListing.module.scss","webpack:///./src/templates/category.js","webpack:///./src/components/PostTags.js","webpack:///./src/components/PostListing.js","webpack:///./src/components/PostTags.module.scss"],"names":["module","exports","CategoryTemplate","data","pageContext","title","category","config","siteTitle","postEdges","allMarkdownRemark","edges","PostTags","tags","className","styles","tagContainer","map","tag","key","to","PostListing","postList","forEach","postEdge","push","path","node","fields","slug","frontmatter","categories","cover","date","excerpt","timeToRead","getPostList","articleList","post","articleBox","right","meta","join","postStyles","postMeta"],"mappings":"8EACAA,EAAOC,QAAU,CAAC,YAAc,2CAA2C,WAAa,0CAA0C,MAAQ,oCAAoC,KAAO,qC,kCCDrL,kGAqBeC,UAdU,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,YAAT,OACvB,kBAAC,IAAD,KACE,8BACE,kBAAC,IAAD,CAAQC,MAAK,KAAOD,EAAYE,SAAnB,OAAkCC,IAAOC,YACtD,wCAEL,IACAJ,EAAYE,UAEP,kBAAC,IAAD,CAAaG,UAAWN,EAAKO,kBAAkBC,Y,iHCEtCC,IAbE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAClB,OACE,yBAAKC,UAAWC,IAAOC,cACpBH,GACCA,EAAKI,KAAI,SAAAC,GAAG,OACV,kBAAC,OAAD,CAAMC,IAAKD,EAAKE,GAAE,SAAW,IAAYF,IACvC,8BAAOA,U,kCCXnB,2FAiDeG,IA3CK,SAAC,GAAmB,IAAjBZ,EAAgB,EAAhBA,UAkBfa,EAjBc,WAClB,IAAMA,EAAW,GAajB,OAZAb,EAAUc,SAAQ,SAAAC,GAChBF,EAASG,KAAK,CACZC,KAAMF,EAASG,KAAKC,OAAOC,KAC3BhB,KAAMW,EAASG,KAAKG,YAAYjB,KAChCkB,WAAYP,EAASG,KAAKG,YAAYC,WACtCC,MAAOR,EAASG,KAAKG,YAAYE,MACjC3B,MAAOmB,EAASG,KAAKG,YAAYzB,MACjC4B,KAAMT,EAASG,KAAKC,OAAOK,KAC3BC,QAASV,EAASG,KAAKO,QACvBC,WAAYX,EAASG,KAAKQ,gBAGvBb,EAGQc,GACjB,OACE,yBAAKtB,UAAWC,IAAOsB,aAErBf,EAASL,KAAI,SAAAqB,GAAI,OACf,kBAAC,OAAD,CAAMlB,GAAIkB,EAAKZ,KAAMP,IAAKmB,EAAKjC,OAC7B,6BAASS,UAAWC,IAAOwB,YACzB,yBAAKzB,UAAWC,IAAOyB,OACrB,4BAAKF,EAAKjC,OACV,yBAAKS,UAAWC,IAAO0B,MACpBH,EAAKL,KADR,MACsB,8BAAOK,EAAKP,WAAWW,KAAK,QAAe,IADjE,KAEWJ,EAAKH,WAFhB,YAEqC,KAErC,2BAAIG,EAAKJ,SACT,yBAAKpB,UAAW6B,IAAWC,UACzB,kBAAC,IAAD,CAAU/B,KAAMyB,EAAKzB,iB,qBCtCrCb,EAAOC,QAAU,CAAC,aAAe","file":"component---src-templates-category-js-5cefdcc8ce759c826e52.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"articleList\":\"PostsListing-module--article-list--3ReSK\",\"articleBox\":\"PostsListing-module--article-box--3M6_I\",\"right\":\"PostsListing-module--right--2MxCO\",\"meta\":\"PostsListing-module--meta--3cFzL\"};","import React from 'react'\nimport Helmet from 'react-helmet'\nimport { graphql } from 'gatsby'\nimport Layout from '../layout'\nimport PostListing from '../components/PostListing'\nimport config from '../../data/SiteConfig'\n\nconst CategoryTemplate = ({ data, pageContext }) => (\n  <Layout>\n    <main>\n      <Helmet title={` \"${pageContext.category}\" - ${config.siteTitle}`} />\n      <h1>\nCategory:\n{' '}\n{pageContext.category}\n</h1>\n      <PostListing postEdges={data.allMarkdownRemark.edges} />\n    </main>\n  </Layout>\n)\n\nexport default CategoryTemplate\n\n/* eslint no-undef: \"off\" */\nexport const pageQuery = graphql`\n  query CategoryPage($category: String) {\n    allMarkdownRemark(\n      limit: 1000\n      sort: { fields: [fields___date], order: DESC }\n      filter: { frontmatter: { categories: { in: [$category] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n            date(formatString: \"MMMM DD, YYYY\")\n          }\n          excerpt\n          timeToRead\n          frontmatter {\n            title\n            tags\n            cover\n            date\n            categories\n          }\n        }\n      }\n    }\n  }\n`\n","import React from 'react'\nimport _ from 'lodash'\nimport { Link } from 'gatsby'\nimport styles from './PostTags.module.scss'\n\nconst PostTags = ({ tags }) => {\n  return (\n    <div className={styles.tagContainer}>\n      {tags &&\n        tags.map(tag => (\n          <Link key={tag} to={`/tags/${_.kebabCase(tag)}`}>\n            <span>{tag}</span>\n          </Link>\n        ))}\n    </div>\n  )\n}\n\nexport default PostTags\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport styles from './PostsListing.module.scss'\nimport PostTags from '../components/PostTags'\nimport postStyles from '../components/PostTags.module.scss'\n\nconst PostListing = ({ postEdges }) => {\n  const getPostList = () => {\n    const postList = []\n    postEdges.forEach(postEdge => {\n      postList.push({\n        path: postEdge.node.fields.slug,\n        tags: postEdge.node.frontmatter.tags,\n        categories: postEdge.node.frontmatter.categories,\n        cover: postEdge.node.frontmatter.cover,\n        title: postEdge.node.frontmatter.title,\n        date: postEdge.node.fields.date,\n        excerpt: postEdge.node.excerpt,\n        timeToRead: postEdge.node.timeToRead\n      })\n    })\n    return postList\n  }\n\n  const postList = getPostList()\n  return (\n    <div className={styles.articleList}>\n      {/* Your post list here. */\n      postList.map(post => (\n        <Link to={post.path} key={post.title}>\n          <article className={styles.articleBox}>\n            <div className={styles.right}>\n              <h3>{post.title}</h3>\n              <div className={styles.meta}>\n                {post.date} &mdash; <span>{post.categories.join(' / ')}</span>{' '}\n                &mdash; {post.timeToRead} Min Read{' '}\n              </div>\n              <p>{post.excerpt}</p>\n              <div className={postStyles.postMeta}>\n                <PostTags tags={post.tags} />\n              </div>\n            </div>\n          </article>\n        </Link>\n      ))}\n    </div>\n  )\n}\n\nexport default PostListing\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"tagContainer\":\"PostTags-module--tag-container--ksSgQ\"};"],"sourceRoot":""}