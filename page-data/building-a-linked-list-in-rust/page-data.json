{"componentChunkName":"component---src-templates-post-js","path":"/building-a-linked-list-in-rust","result":{"data":{"markdownRemark":{"html":"<p>I got myself a copy of <a href=\"https://www.manning.com/books/rust-in-action?query=rust%20in%20action\">Rust in Action</a>, it has been a nice read so far. I have followed the amazing <a href=\"https://doc.rust-lang.org/book/\">rust-lang book</a> as well but I still got <a href=\"https://www.manning.com/books/rust-in-action?query=rust%20in%20action\">Rust in Action</a> since the table of contents seemed interesting.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1 Introducing Rust\n2 Language Foundations\n3 Compound Data Types\n4 Lifetimes, Ownership and Borrowing\n5 Data in Depth\n6 Memory\n7 Files &amp; Storage\n8 Networking\n9 Time and Time Keeping\n10 Processes, Threads and Containers\n11 Kernel\n12 Signals, Interrupts and Exceptions</code></pre></div>\n<p>I had a hard time wrapping my head around the Ownership concept. So I gave that a peek and found this (section: 4.3 - What is an Owner? Does it Have any Responsibilities?):</p>\n<blockquote>\n<p>An implication of this system is that values may not outlive their owner. This kind of situation can make data structures built with references, such as trees and graphs, feel slightly bureaucratic. If the root node of a tree is the owner of the whole tree, it can’t be removed without taking ownership into account.</p>\n</blockquote>\n<p>I remember trying a linked-list implementation and move semantics not working out for me.</p>\n<p>To give you a taste, this fairly simple definition of a Node is not safe.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Node</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n    next<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Let's build a linked list!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The compiler says:</p>\n<blockquote>\n<p>Recursive type <code class=\"language-text\">Node</code> has infinite type.</p>\n</blockquote>\n<p>Additionally, the compiler also suggests use of <code class=\"language-text\">Box&lt;Node></code> instead of <code class=\"language-text\">Node</code>. But what's a <code class=\"language-text\">Box</code>?</p>\n<blockquote>\n<p>A pointer type for heap allocation.\n[<a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html\">source</a>]</p>\n</blockquote>\n<p>Let's try initializing nodes and assign the second node as the next of the previous.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">// Somewhere within src/main.rs</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Node</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n    next<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token operator\">>></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> node1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n        value<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        next<span class=\"token punctuation\">:</span> <span class=\"token class-name\">None</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> node2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n        value<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n        next<span class=\"token punctuation\">:</span> <span class=\"token class-name\">None</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    node1<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>node2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> node1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">next</code> property on <code class=\"language-text\">Node</code> contains an <code class=\"language-text\">Optional</code> <code class=\"language-text\">Box</code> of <code class=\"language-text\">Node</code> type. We use <code class=\"language-text\">Option</code> because initially a list would have only one item and that means the <code class=\"language-text\">next</code> property\nshould point to nothing. <code class=\"language-text\">Option&lt;T></code> type means either expect type <code class=\"language-text\">T</code> or <code class=\"language-text\">None</code>.</p>\n<p>We create <code class=\"language-text\">node1</code> and <code class=\"language-text\">node2</code>, initialize their <code class=\"language-text\">next</code> to <code class=\"language-text\">None</code> for starters, and then</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\">    node1<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>node2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">Some(...)</code> is a way to offer a value when <code class=\"language-text\">Option&lt;T></code> is expected.</li>\n<li><code class=\"language-text\">Box::new(...)</code> allocates memory in the heap for <code class=\"language-text\">node2</code>.</li>\n<li><code class=\"language-text\">node2</code> looks like <code class=\"language-text\">{ value: 2, next: None }</code>, nothing special.</li>\n</ul>\n<p>Running</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">cargo build\n./target/debug/rust_tutorial</code></pre></div>\n<p><em>hmm...</em> We are not passing our <code class=\"language-text\">Node</code> instances to functions yet, I anticipate the <a href=\"https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\"><code class=\"language-text\">Ownership</code></a> of nodes would cause the compiler to complain once we start creating, updating, deleting nodes.</p>\n<p>We'll now try creating nodes by implementing a <code class=\"language-text\">new</code> method on the <code class=\"language-text\">Node</code> and add another node by implementing and using an <code class=\"language-text\">add</code> method.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">// Somewhere within src/main.rs</span>\n\n<span class=\"token attribute attr-name\">#[derive(Debug)]</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Node</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n    next<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token operator\">>></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">:</span> <span class=\"token class-name\">None</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> root <span class=\"token operator\">=</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    root<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// prints: Node { value: 1, next: Some(Node { value: 2, next: None }) }</span></code></pre></div>\n<p>It doesn't seem that bad? There was a minor gotcha though. Try to spot the difference.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">// returns Node</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">:</span> <span class=\"token class-name\">None</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// returns ()</span>\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">:</span> <span class=\"token class-name\">None</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Luckily, the rust compiler warned me well in advance so I could squint and figure it out without having to google. Alternatively, <code class=\"language-text\">return Node { ... }</code> works fine too.</p>\n<p>The <code class=\"language-text\">add(...)</code> method:</p>\n<ul>\n<li>Requires a mutable reference to root.</li>\n<li>Sets the <code class=\"language-text\">next</code> property to a given <code class=\"language-text\">Optional&lt;Box&lt;Node>></code>.</li>\n</ul>\n<hr>\n<p>Let's try to add a bunch of new items next.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[derive(Debug)]</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Node</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n    next<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token operator\">>></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">:</span> <span class=\"token class-name\">None</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> root <span class=\"token operator\">=</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> number <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">5</span> <span class=\"token punctuation\">{</span>\n        root<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Node</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> root<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// prints: Node { value: 1, next: Some(Node { value: 4, next: None }) }</span></code></pre></div>\n<p>Welp that was bad! We added all the items to the root, effectively replacing everything!</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">impl</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">add</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> node_ <span class=\"token operator\">=</span> <span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> node_added <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> next_node <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>older_node<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> next_node <span class=\"token punctuation\">{</span> #\n      <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"An older node - {:?}\"</span><span class=\"token punctuation\">,</span> older_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      node_added <span class=\"token operator\">=</span> <span class=\"token keyword\">match</span> older_node<span class=\"token punctuation\">.</span>next <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">None</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          older_node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>node_<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span>\n        _ <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          next_node <span class=\"token operator\">=</span> older_node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span> # expected mutable reference found <span class=\"token class-name\">Option</span>\n          <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Node added - {}\"</span><span class=\"token punctuation\">,</span> node_added<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">!</span>node_added <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>node_<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">add(...)</code> implementation is painful here, because of the error in the comments.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\">next_node <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> older_node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span> # cannot assign to next_node because it is borrowed</code></pre></div>\n<p>So we can't use the same reference for navigating and writing.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token attribute attr-name\">#[derive(Debug)]</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Node</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n  next<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">mut</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">>></span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">></span> <span class=\"token class-name\">Node</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">Node</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> next<span class=\"token punctuation\">:</span> <span class=\"token class-name\">None</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token attribute attr-name\">#[derive(Debug)]</span>\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">LinkedList</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  root<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">mut</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">>></span><span class=\"token operator\">></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">impl</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">></span> <span class=\"token class-name\">LinkedList</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">new</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">mut</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">>></span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token class-name\">LinkedList</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">LinkedList</span> <span class=\"token punctuation\">{</span> root<span class=\"token punctuation\">:</span> node <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">push</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> node<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">&amp;</span><span class=\"token lifetime-annotation symbol\">'a</span> <span class=\"token keyword\">mut</span> <span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token operator\">&lt;</span><span class=\"token lifetime-annotation symbol\">'a</span><span class=\"token operator\">>></span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> maybe_node <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>root<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">loop</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">match</span> maybe_node <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>tail_node<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> tail_node<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">.</span><span class=\"token function\">is_none</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            tail_node<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">*</span>maybe_node <span class=\"token operator\">=</span> node<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        _ <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> node <span class=\"token operator\">=</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> boxed_node <span class=\"token operator\">=</span> <span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> linked_list <span class=\"token operator\">=</span> <span class=\"token class-name\">LinkedList</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token keyword\">mut</span> boxed_node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> number <span class=\"token keyword\">in</span> <span class=\"token number\">1</span><span class=\"token punctuation\">..</span><span class=\"token number\">5</span> <span class=\"token punctuation\">{</span>\n    node <span class=\"token operator\">=</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    linked_list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> linked_list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>After a long day of struggle, I have an implementation that doesn't compile. The reasons are pointers; the way I have used them in c++ are not identical in their usage over here in Rust.</p>\n<p>I went over to stackoverflow to get some <a href=\"https://stackoverflow.com/questions/65493710/how-does-ownership-of-variables-work-between-iterations/65495662?noredirect=1#comment115794305_65495662\">help</a>. That didn't quite work as expected. The answer submitted also doesn't compile.</p>\n<blockquote>\n<p>\"I am trying to learn rust and thought of implementing a linked list as a practice problem\" you fell victim to one of the classic blunders. The most famous is never create a self-referencing data structure, but only sightly less well known this: <a href=\"https://rust-unofficial.github.io/too-many-lists/\">never think linked lists are a beginner-level data structure in rust</a>. – Masklinn</p>\n</blockquote>\n<p>☝️ Is one of the comments on the question.</p>\n<p>I was suggested to take a look at <a href=\"https://doc.rust-lang.org/std/rc/struct.Rc.html\"><code class=\"language-text\">RC</code></a>. Overall it was disappointing to not be able to do something.</p>\n<p>I tried to come up with some simpler plans and found a nice set of repositories to try out in a separate session:</p>\n<ol>\n<li><a href=\"https://github.com/rust-lang/rustlings\">Rustlings</a></li>\n<li><a href=\"https://siciarz.net/tag/24%20days%20of%20rust/\">24 days of rust</a></li>\n<li><a href=\"https://createlang.rs/\">Create a language in Rust</a></li>\n<li><a href=\"https://picklenerd.github.io/pngme_book/\">PNGme: An Intermediate Rust Project</a></li>\n<li><a href=\"https://github.com/warycat/rustgym\">Rust Gym</a></li>\n</ol>\n<p>I believe creating a language requries a more time than I currently have, other items seem to be relatively easier.</p>","timeToRead":6,"excerpt":"I got myself a copy of Rust in Action, it has been a nice read so far. I have followed the amazing rust-lang book as well but I still got…","frontmatter":{"title":"Building a linked list in rust","cover":"https://picsum.photos/seed/seed_n/1500/300","date":"2020-12-28T00:00:00.000Z","categories":["experiments"],"tags":["programming"]},"fields":{"slug":"/building-a-linked-list-in-rust","date":"December 27, 2020"}}},"pageContext":{"slug":"/building-a-linked-list-in-rust","nexttitle":"After effects of a study break","nextslug":"/after-effects-of-a-study-break","prevtitle":"Ch-10 Batch Processing With Unix Tools","prevslug":"/ch-10-batch-processing-with-unix-tools"}},"staticQueryHashes":["3969716136"]}