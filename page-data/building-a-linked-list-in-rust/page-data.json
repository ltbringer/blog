{"componentChunkName":"component---src-templates-post-js","path":"/building-a-linked-list-in-rust","result":{"data":{"markdownRemark":{"html":"<p>I got myself a copy of <a href=\"https://www.manning.com/books/rust-in-action?query=rust%20in%20action\">Rust in Action</a>, it has been a nice read so far. I have followed the amazing <a href=\"https://doc.rust-lang.org/book/\">rust-lang book</a> as well but I still got <a href=\"https://www.manning.com/books/rust-in-action?query=rust%20in%20action\">Rust in Action</a> since the table of contents seemed interesting.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1 Introducing Rust\n2 Language Foundations\n3 Compound Data Types\n4 Lifetimes, Ownership and Borrowing\n5 Data in Depth\n6 Memory\n7 Files &amp; Storage\n8 Networking\n9 Time and Time Keeping\n10 Processes, Threads and Containers\n11 Kernel\n12 Signals, Interrupts and Exceptions</code></pre></div>\n<p>I had a hard time wrapping my head around the Ownership concept. So I gave that a peek and found this (section: 4.3 - What is an Owner? Does it Have any Responsibilities?):</p>\n<blockquote>\n<p>An implication of this system is that values may not outlive their owner. This kind of situation can make data structures built with references, such as trees and graphs, feel slightly bureaucratic. If the root node of a tree is the owner of the whole tree, it can’t be removed without taking ownership into account.</p>\n</blockquote>\n<p>I remember trying a linked-list implementation and move semantics not working out for me.</p>\n<p>To give you a taste, this fairly simple definition of a Node is not safe.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Node</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n    next<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Let's build a linked list!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The compiler says:</p>\n<blockquote>\n<p>Recursive type <code class=\"language-text\">Node</code> has infinite type.</p>\n</blockquote>\n<p>Additionally, the compiler also suggests use of <code class=\"language-text\">Box&lt;Node&gt;</code> instead of <code class=\"language-text\">Node</code>. Ok? but what's a <code class=\"language-text\">Box</code>?</p>\n<blockquote>\n<p>A pointer type for heap allocation.</p>\n<ul>\n<li><a href=\"https://doc.rust-lang.org/std/boxed/struct.Box.html\">source</a></li>\n</ul>\n</blockquote>\n<p>Hmm.. okay let's try some code.</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token comment\">// Somewhere within src/main.rs</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Node</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span><span class=\"token punctuation\">,</span>\n    next<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Box</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">Node</span><span class=\"token operator\">>></span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> node1 <span class=\"token operator\">=</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n        value<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        next<span class=\"token punctuation\">:</span> <span class=\"token class-name\">None</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">let</span> node2 <span class=\"token operator\">=</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">{</span>\n        value<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n        next<span class=\"token punctuation\">:</span> <span class=\"token class-name\">None</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    node1<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>node2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{:?}\"</span><span class=\"token punctuation\">,</span> node1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The <code class=\"language-text\">next</code> property on <code class=\"language-text\">Node</code> contains an <code class=\"language-text\">Optional</code> <code class=\"language-text\">Box</code> of <code class=\"language-text\">Node</code> type. We use <code class=\"language-text\">Option</code> because initially a list would have only one item and that means the <code class=\"language-text\">next</code> property\nshould point to nothing. <code class=\"language-text\">Option&lt;T&gt;</code> type means either expect type <code class=\"language-text\">T</code> or <code class=\"language-text\">None</code>.</p>\n<p>We create <code class=\"language-text\">node1</code> and <code class=\"language-text\">node2</code>, initialize their <code class=\"language-text\">next</code> to <code class=\"language-text\">None</code> for starters, and then</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\">    node1<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Box</span><span class=\"token punctuation\">::</span><span class=\"token function\">new</span><span class=\"token punctuation\">(</span>node2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">Some(...)</code> is a way to offer a value when <code class=\"language-text\">Option&lt;T&gt;</code> is expected.</li>\n<li><code class=\"language-text\">Box::new(...)</code> allocates memory in the heap for <code class=\"language-text\">node2</code>.</li>\n<li><code class=\"language-text\">node2</code> looks like <code class=\"language-text\">{ value: 2, next: None }</code>, nothing special.</li>\n</ul>\n<p><em>hmm...</em> We are not passing our <code class=\"language-text\">Node</code> instances to functions yet, I anticipate the <a href=\"https://doc.rust-lang.org/book/ch04-00-understanding-ownership.html\"><code class=\"language-text\">Ownership</code></a> of nodes would cause the compiler to complain once we start creating, updating, deleting nodes.</p>","timeToRead":2,"excerpt":"I got myself a copy of Rust in Action, it has been a nice read so far. I have followed the amazing rust-lang book as well but I still got…","frontmatter":{"title":"Building a linked list in rust","cover":"https://unsplash.it/1152/300/?random?BirchintheRoses","date":"2020-12-28T00:00:00.000Z","categories":["experiments"],"tags":["programming"]},"fields":{"slug":"/building-a-linked-list-in-rust","date":"December 27, 2020"}}},"pageContext":{"slug":"/building-a-linked-list-in-rust","nexttitle":"Deriving Bayes Theorem","nextslug":"/deriving-bayes-theorem","prevtitle":"Reanimation","prevslug":"/reanimation"}},"staticQueryHashes":["3969716136"]}