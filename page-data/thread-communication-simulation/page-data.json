{"componentChunkName":"component---src-templates-post-js","path":"/thread-communication-simulation","result":{"data":{"markdownRemark":{"html":"<p>Let's say we have: </p>\n<ol>\n<li>A buffer of limited size.</li>\n<li>A couple of producers.</li>\n<li>A couple of consumers.</li>\n</ol>\n<p>What happens when producers try to fill the buffer while consumers are simultaneously trying to read the buffer. We want to understand <code class=\"language-text\">deadlocks</code>, <code class=\"language-text\">livelocks</code> and what should be done for a normal operation.</p>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token comment\">/**  main.scala **/</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span>mutable</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">scala<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span>Random\n\n<span class=\"token keyword\">object</span> Main <span class=\"token keyword\">extends</span> App <span class=\"token punctuation\">{</span>\n   <span class=\"token keyword\">class</span> Consumer<span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> buffer<span class=\"token operator\">:</span> mutable<span class=\"token punctuation\">.</span>Queue<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> Thread <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Since Thread already has access to Runnable\n     * We can override run.\n     */</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">val</span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        buffer<span class=\"token punctuation\">.</span>synchronized <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span>isEmpty<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            println<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"[consumer:$id] buffer empty | waiting.\"</span><span class=\"token punctuation\">)</span>\n            buffer<span class=\"token punctuation\">.</span>wait<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">val</span> x <span class=\"token operator\">=</span> buffer<span class=\"token punctuation\">.</span>dequeue<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          println<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"[consumer:$id] picked $x from the buffer\"</span><span class=\"token punctuation\">)</span>\n          buffer<span class=\"token punctuation\">.</span>notify<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        Thread<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>nextInt<span class=\"token punctuation\">(</span><span class=\"token number\">250</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">class</span> Producer<span class=\"token punctuation\">(</span>id<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> buffer<span class=\"token operator\">:</span> mutable<span class=\"token punctuation\">.</span>Queue<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> capacity<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">extends</span> Thread <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">override</span> <span class=\"token keyword\">def</span> run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">val</span> random <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> Random<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        buffer<span class=\"token punctuation\">.</span>synchronized <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">.</span>size <span class=\"token operator\">==</span> capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            println<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"[producer:$id]: buffer is full | waiting.\"</span><span class=\"token punctuation\">)</span>\n            buffer<span class=\"token punctuation\">.</span>wait<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">}</span>\n          println<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"[producer:$id] producing $i\"</span><span class=\"token punctuation\">)</span>\n          buffer<span class=\"token punctuation\">.</span>enqueue<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n          buffer<span class=\"token punctuation\">.</span>notify<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n          i <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token punctuation\">}</span>\n        Thread<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span>random<span class=\"token punctuation\">.</span>nextInt<span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">def</span> multiProdCons<span class=\"token punctuation\">(</span>nConsumers<span class=\"token operator\">:</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> nProducers<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">,</span> capacity<span class=\"token operator\">:</span> <span class=\"token builtin\">Int</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">val</span> buffer<span class=\"token operator\">:</span> mutable<span class=\"token punctuation\">.</span>Queue<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> mutable<span class=\"token punctuation\">.</span>Queue<span class=\"token punctuation\">[</span><span class=\"token builtin\">Int</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> to nConsumers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>i <span class=\"token keyword\">=></span> <span class=\"token keyword\">new</span> Consumer<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> to nProducers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>foreach<span class=\"token punctuation\">(</span>i <span class=\"token keyword\">=></span> <span class=\"token keyword\">new</span> Producer<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> buffer<span class=\"token punctuation\">,</span> capacity<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  multiProdCons<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The detail is in the wait over <code class=\"language-text\">while(buffer.isEmpty)</code> in the implementation of <code class=\"language-text\">Consumer</code> so if the current <code class=\"language-text\">thread</code> is active, and <code class=\"language-text\">buffer</code> is not empty, only then is a <code class=\"language-text\">consumer</code> allowed to read off the `buffer.</p>\n<h2 id=\"deadlock-example\" style=\"position:relative;\"><a href=\"#deadlock-example\" aria-label=\"deadlock example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Deadlock Example</h2>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token keyword\">case</span> <span class=\"token keyword\">class</span> Friend<span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">String</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">def</span> bow<span class=\"token punctuation\">(</span>other<span class=\"token operator\">:</span> Friend<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>synchronized <span class=\"token punctuation\">{</span>\n          println<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"$this: bowing down to $other\"</span><span class=\"token punctuation\">)</span>\n          other<span class=\"token punctuation\">.</span>rise<span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>\n          println<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"$this: Rise since $other has risen.\"</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">def</span> rise<span class=\"token punctuation\">(</span>other<span class=\"token operator\">:</span> Friend<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>synchronized <span class=\"token punctuation\">{</span>\n            println<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"$this: rising before $other.\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">var</span> side <span class=\"token operator\">=</span> <span class=\"token string\">\"right\"</span>\n    <span class=\"token keyword\">def</span> switchSide<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>side <span class=\"token operator\">==</span> <span class=\"token string\">\"right\"</span><span class=\"token punctuation\">)</span> side <span class=\"token operator\">=</span> <span class=\"token string\">\"left\"</span>\n        <span class=\"token keyword\">else</span> side <span class=\"token operator\">=</span> <span class=\"token string\">\"right\"</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">def</span> pass<span class=\"token punctuation\">(</span>other<span class=\"token operator\">:</span> Friend<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token builtin\">Unit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>side <span class=\"token operator\">==</span> other<span class=\"token punctuation\">.</span>side<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            println<span class=\"token punctuation\">(</span>s<span class=\"token string\">\"$this: feel free to pass\"</span><span class=\"token punctuation\">)</span>\n            switchSide<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            Thread<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">val</span> bob <span class=\"token operator\">=</span> Friend<span class=\"token punctuation\">(</span><span class=\"token string\">\"Bob\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> alice <span class=\"token operator\">=</span> Friend<span class=\"token punctuation\">(</span><span class=\"token string\">\"Alice\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">new</span> Thread<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> bob<span class=\"token punctuation\">.</span>bow<span class=\"token punctuation\">(</span>alice<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">new</span> Thread<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> alice<span class=\"token punctuation\">.</span>bow<span class=\"token punctuation\">(</span>bob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>When we run the above, we get the output as:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$\nFriend<span class=\"token punctuation\">(</span>Bob<span class=\"token punctuation\">)</span>: bowing to Friend<span class=\"token punctuation\">(</span>Alice<span class=\"token punctuation\">)</span>\nFriend<span class=\"token punctuation\">(</span>Alice<span class=\"token punctuation\">)</span>: bowing to Friend<span class=\"token punctuation\">(</span>Bob<span class=\"token punctuation\">)</span></code></pre></div>\n<p>But nothing else happens, because both call the <code class=\"language-text\">other.rise(...)</code> method which calls their synchronized expression, causing both to wait for the other to <code class=\"language-text\">println(...)</code> first. The first instance of friend that runs locks the other and <em>vice-versa</em>. This is a Deadlock, where (two) threads cannot proceed because they are waiting on each other to release their locks.</p>\n<h2 id=\"livelock-example\" style=\"position:relative;\"><a href=\"#livelock-example\" aria-label=\"livelock example permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Livelock example</h2>\n<div class=\"gatsby-highlight\" data-language=\"scala\"><pre class=\"language-scala\"><code class=\"language-scala\"><span class=\"token comment\">/** main.scala **/</span>\n<span class=\"token keyword\">val</span> jerry <span class=\"token operator\">=</span> Friend<span class=\"token punctuation\">(</span><span class=\"token string\">\"Jerry\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">val</span> tom <span class=\"token operator\">=</span> Friend<span class=\"token punctuation\">(</span><span class=\"token string\">\"Tom\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">new</span> Thread<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> jerry<span class=\"token punctuation\">.</span>pass<span class=\"token punctuation\">(</span>tom<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">new</span> Thread<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">=></span> tom<span class=\"token punctuation\">.</span>pass<span class=\"token punctuation\">(</span>jerry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>start<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>The output of this looks like an infinite loop condition, this is a live-lock. A situation where none of the threads are block but are not able to proceed because they yield to the other threads.</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">$\nFriend<span class=\"token punctuation\">(</span>Jerry<span class=\"token punctuation\">)</span>: feel <span class=\"token function\">free</span> to pass\nFriend<span class=\"token punctuation\">(</span>Tom<span class=\"token punctuation\">)</span>: feel <span class=\"token function\">free</span> to pass\nFriend<span class=\"token punctuation\">(</span>Tom<span class=\"token punctuation\">)</span>: feel <span class=\"token function\">free</span> to pass\nFriend<span class=\"token punctuation\">(</span>Jerry<span class=\"token punctuation\">)</span>: feel <span class=\"token function\">free</span> to pass\nFriend<span class=\"token punctuation\">(</span>Tom<span class=\"token punctuation\">)</span>: feel <span class=\"token function\">free</span> to pass\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p><em>fin.</em></p>","timeToRead":2,"excerpt":"Let's say we have:  A buffer of limited size. A couple of producers. A couple of consumers. What happens when producers try to fill the…","frontmatter":{"title":"Thread Communication simulation","cover":"https://unsplash.it/1152/300/?random?BirchintheRoses","date":"2020-04-20T00:00:00.000Z","categories":["programming"],"tags":["scala","parallel"]},"fields":{"slug":"/thread-communication-simulation","date":"April 19, 2020"}}},"pageContext":{"slug":"/thread-communication-simulation","nexttitle":"Reanimation","nextslug":"/reanimation","prevtitle":"Lucifer's pen","prevslug":"/lucifers-pen"}}}